from heapq import heappush, heappop

def a_star(graph, start, goal):
    frontier = []
    heappush(frontier, (0, start))
    came_from = {}
    cost_so_far = {}
    came_from[start] = None
    cost_so_far[start] = 0
    
    while frontier:
        current = heappop(frontier)[1]
        
        if current == goal:
            break
            
        for next in graph.neighbors(current):
            new_cost = cost_so_far[current] + graph.cost(current, next)
            if next not in cost_so_far or new_cost < cost_so_far[next]:
                cost_so_far[next] = new_cost
                priority = new_cost + heuristic(goal, next)
                heappush(frontier, (priority, next))
                came_from[next] = current
                
    return came_from, cost_so_far

def heuristic(a, b):
    # Manhattan distance on a grid
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

# Example usage:
if __name__ == '__main__':
    graph = GridWithWeights(10, 10)
    graph.walls = [(1, 7), (1, 8), (2, 7), (2, 8), (3, 7), (3, 8)]
    came_from, cost_so_far = a_star(graph, (1, 4), (8, 5))
    print(came_from)
    print(cost_so_far)
